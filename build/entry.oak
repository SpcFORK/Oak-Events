// oak build
__Oak_Modules := {}
__Oak_Import_Aliases := ?
fn __oak_modularize(name, module) __Oak_Modules.(name) := module
fn __oak_module_import(name) if ___runtime_lib?(name) {
	true -> import(name)
	_ -> if type(module := __Oak_Modules.(name)) {
		:null -> if module := __Oak_Modules.(__Oak_Import_Aliases.(name)) {
			? -> import(name)
			_ -> {
				mod := module()
				__Oak_Modules.(name) := mod
				mod
			}
		}
		:function -> {
			m := module()
			__Oak_Modules.(name) := m
			m
		}
		_ -> module
	}
}
(__oak_modularize('entry.oak',fn()(hlp:=__oak_module_import('hlp.oak'),EVB:=__oak_module_import('src/EventBus.oak'),hlp.getExporter().myModule:=EVB,{EVB:EVB,hlp:hlp})),__oak_modularize('hlp.oak',fn()(fn getExporter()(if globalThis.module{?->globalThis.window,_->globalThis.module.exports}),fn platform?()(if getExporter()=globalThis.module{true->'node',false->'web'}),{getExporter:getExporter,platform?:platform?})),__oak_modularize('src/EventBus.oak',fn()(std:=__oak_module_import('std'),{propAcc:propAcc}:=__oak_module_import('src/PropAcc.oak'),eventBus:={listeners:listeners:=propAcc(),on:fn on(event,listener)(listeners.set(event,std.default(listeners.get(event),[])<<listener)),off:fn off(event,listener)if gotEv:=listeners.get(event){?->{},_->(index:=std.find(gotEv,fn(ii)string(listener)=string(ii)),if index>-1{true->listeners.set(event,std.filter(gotEv,fn(ii,ic)ic !=index))})},emit:fn emit(event,args...)if gotEv:=listeners.get(event){?->{},_->std.each(gotEv,fn(ii,ic)(ii(args...)))}},{emit:emit,eventBus:eventBus,listeners:listeners,off:off,on:on,propAcc:propAcc,std:std})),__oak_modularize('src/PropAcc.oak',fn()(std:=__oak_module_import('std'),propAcc:=fn(i)Ob:={_!:std.default(i,{}),setAll:fn(i)Ob._!<-propAcc(i),getAll:fn()Ob._!,get:fn(x)Ob._!.(x),set:fn(x,v)Ob._!.(x)<-v},{propAcc:propAcc,std:std})),__Oak_Import_Aliases<-{},__oak_module_import('entry.oak'))